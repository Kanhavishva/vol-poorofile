// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Ildar Akhmetgaleev (AkhIL)
// See https://github.com/akhilman/vol-poorofile
// vim: shiftwidth=2 tabstop=2

{# Template settings -#}
{% set n_rows = (n_rows or 20) | int -%}
{% set history_n_bars = (history_n_bars or 25) | int -%}
{% set width_multipler = (width_multipler or 0.6) | float -%}
{% set block_colors = (block_colors or 'purple,green') | split(',') -%}
{% set boundary_color = boundary_color or 'blue' -%}
{% set recent_n_bars = (recent_n_bars or 50) | int -%}
{% set recent_block_color = recent_block_color or 'gray' -%}
{% set filter_size = (filter_size or 400) | int -%}
{% set max_bars_back = (max_bars_back or 500) | int -%}

//@version=4
study("Poor man's volume profile", "VPoorof", overlay=true)

enable_history_profiles = input(true, "Enable history profiles")
enable_recent_profile = input(true, "Enable recent profiles")
history_n_bars = input({{history_n_bars}}, "Bars in history profile block", minval=1, maxval={{max_bars_back}})
recent_n_bars = input({{recent_n_bars}}, "Bars in recent profile block", minval=1, maxval={{max_bars_back}})
width_multipler = input({{width_multipler}}, "Row width multiplier", minval=0)
filter_size = input({{filter_size}}, "Profile maximum high pass filter size in bars")

BOUNARY_COLOR = color.{{boundary_color}}
LAST_BLOCK_COLOR = color.{{recent_block_color}}
{%- for color in block_colors %}
{{color.upper()}}_BLOCK_COLOR = color.{{color}}
{%- endfor %}

row_width_multiplier = (not enable_history_profiles ? recent_n_bars : not enable_recent_profile ? history_n_bars : min(history_n_bars, recent_n_bars)) * width_multipler

max_bars_back(volume, {{max_bars_back}})
max_bars_back(high, {{max_bars_back}})
max_bars_back(low, {{max_bars_back}})

////
// Calculate profiles
///

level_value(from_i, to_i, lvl_low, lvl_high) =>
	vol = 0.0
	for i = from_i to to_i
		if low[i] < lvl_high and high[i] > lvl_low
			vol := vol + volume[i] / max(1, (high[i] - low[i]) / max(1, lvl_high - lvl_low))
		vol / max(1, lvl_high - lvl_low)

moving_high = highest(high, history_n_bars)
moving_low = lowest(low, history_n_bars)

block_index = floor(bar_index / history_n_bars)
block_bar = bar_index % history_n_bars
block_high = moving_high
block_low = moving_low

// initialize level values
{%- for n in range(n_rows) %}
float lvl{{n}}_low = na
float lvl{{n}}_high = na
float lvl{{n}}_value = na
int lvl{{n}}_width = 0
{% endfor %}
float highest_lvl_value = na

if block_bar == history_n_bars - 1
	lvl_height = (moving_high - moving_low) / {{n_rows}}
	{% for n in range(n_rows) %}
	lvl{{n}}_low := moving_low + lvl_height * {{n}}
	lvl{{n}}_high := moving_low + lvl_height * {{n+1}}
	lvl{{n}}_value := level_value(0, block_bar+1, lvl{{n}}_low, lvl{{n}}_high)
	highest_lvl_value := na(highest_lvl_value) ? lvl{{n}}_value : max(highest_lvl_value, lvl{{n}}_value)
	{% endfor %}
else
	block_high := block_high[1]
	block_low := block_low[1]
	highest_lvl_value := highest_lvl_value[1]

highest_lvl_value_avg = ema(highest_lvl_value, filter_size)

////
// Draw blocks
///

{%- for color in block_colors -%}
{%- set num_colors = loop.length %}

{{color}}_block_bar = (block_index + {{loop.index}}) % {{num_colors}} * history_n_bars + block_bar
{{color}}_bar_offset = {{color}}_block_bar + 1

{% for n in range(n_rows) %}
float {{color}}_lvl{{n}}_y = na
{%- endfor %}

{% for n in range(n_rows) %}
if enable_history_profiles and not na(lvl{{n}}_value[{{color}}_bar_offset]) and not na(highest_lvl_value_avg)
	{{color}}_lvl{{n}}_price = (lvl{{n}}_low[{{color}}_bar_offset] + lvl{{n}}_high[{{color}}_bar_offset]) / 2
	{{color}}_lvl{{n}}_value = lvl{{n}}_value[{{color}}_bar_offset]
	{{color}}_lvl{{n}}_width = min({{history_n_bars * num_colors - 2}}, floor(row_width_multiplier * {{color}}_lvl{{n}}_value / highest_lvl_value_avg))
	{{color}}_lvl{{n}}_y := {{color}}_block_bar <= {{color}}_lvl{{n}}_width ? {{color}}_lvl{{n}}_price : na
{% endfor %}

{% for n in range(n_rows) %}
plot({{color}}_lvl{{n}}_y, color={{color.upper()}}_BLOCK_COLOR, style=plot.style_linebr, linewidth=2, offset=-history_n_bars-1)
{%- endfor %}
{% endfor %}

plot(enable_history_profiles ? block_high : na, color=BOUNARY_COLOR, style=plot.style_stepline, offset=-history_n_bars)
plot(enable_history_profiles ? block_low : na, color=BOUNARY_COLOR, style=plot.style_stepline, offset=-history_n_bars)


////
// Draw recent block
///

var line recent_high_line = na
var line recent_low_line = na
{% for n in range(n_rows) -%}
var line recent_lvl{{n}}_line = na
{% endfor %}

if barstate.islast and enable_recent_profile
	if na(recent_low_line)
		recent_low_line := line.new(bar_index, high, bar_index, high, color=LAST_BLOCK_COLOR)
	if na(recent_high_line)
		recent_high_line := line.new(bar_index, low, bar_index, low, color=LAST_BLOCK_COLOR)
	{% for n in range(n_rows) -%}
	if na(recent_lvl{{n}}_line)
		recent_lvl{{n}}_line := line.new(bar_index, close, bar_index, close, width=3, color=LAST_BLOCK_COLOR)
	{% endfor %}

	recent_high = high[0]
	recent_low = low[0]
	for i=0 to recent_n_bars
		recent_high := max(high[i], recent_high)
		recent_low := min(low[i], recent_low)
	line.set_x1(recent_high_line, bar_index)
	line.set_x2(recent_high_line, bar_index - recent_n_bars)
	line.set_y1(recent_high_line, recent_high)
	line.set_y2(recent_high_line, recent_high)
	line.set_x1(recent_low_line, bar_index)
	line.set_x2(recent_low_line, bar_index - recent_n_bars)
	line.set_y1(recent_low_line, recent_low)
	line.set_y2(recent_low_line, recent_low)

	recent_lvl_height = (recent_high - recent_low) / {{n_rows}}
	recent_highest_lvl_value = 0.0

	{% for n in range(n_rows) %}
	recent_lvl{{n}}_low = recent_low + recent_lvl_height * {{n}}
	recent_lvl{{n}}_high = recent_low + recent_lvl_height * {{n+1}}
	recent_lvl{{n}}_value = level_value(0, recent_n_bars+1, recent_lvl{{n}}_low, recent_lvl{{n}}_high)
	recent_highest_lvl_value := max(recent_lvl{{n}}_value, recent_highest_lvl_value)
	{% endfor %}

	{%- for n in range(n_rows) %}
	recent_lvl{{n}}_width = if enable_history_profiles
		floor(row_width_multiplier * recent_lvl{{n}}_value / highest_lvl_value_avg)
	else
		floor(row_width_multiplier * recent_lvl{{n}}_value / recent_highest_lvl_value)

	recent_lvl{{n}}_price = (recent_lvl{{n}}_low + recent_lvl{{n}}_high) / 2
	line.set_x1(recent_lvl{{n}}_line, bar_index - recent_lvl{{n}}_width)
	line.set_x2(recent_lvl{{n}}_line, bar_index)
	line.set_y1(recent_lvl{{n}}_line, recent_lvl{{n}}_price)
	line.set_y2(recent_lvl{{n}}_line, recent_lvl{{n}}_price)
	{% endfor %}

if barstate.islast and not enable_recent_profile
	if not na(recent_low_line)
		line.delete(recent_low_line)
		recent_low_line := na
	if not na(recent_high_line)
		line.delete(recent_high_line)
		recent_high_line := na
	{% for n in range(n_rows) -%}
	if not na(recent_lvl{{n}}_line)
		line.delete(recent_lvl{{n}}_line)
		recent_lvl{{n}}_line := na
	{% endfor -%}

